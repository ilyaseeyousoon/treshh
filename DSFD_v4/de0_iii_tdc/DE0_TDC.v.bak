
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_TDC(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,
	
	SIGNAL,
	MOD
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

input SIGNAL;
output MOD;
//input [3:0] GPIO;
//=======================================================
//  REG/WIRE declarations
//=======================================================
reg[3:0] signal_ctr;
wire[3:0] mods, tdc_dval;
reg[8:0] mod_ctr;
reg[15:0] clk_div;
reg[10:0] clk_10k_d;
reg clk_10k;

wire signal, mod, mod_d, dm_clk;

wire[19:0] tdc_out_0, tdc_out_1, tdc_out_2, tdc_out_3;
wire digmod_out, pll_lock, rst;
wire[3:0] pll_clk, inv_clk;
wire[7:0] tdc_clocks;

//assign inv_clk = ~pll_clk;
assign tdc_clocks = {pll_clk, inv_clk}; //pll clock inversion
assign MOD = mod_d;

//pll_clkdiv div_inst (tdc_clocks, rst, LED);
//=======================================================
//  Structural coding
//=======================================================
//assign GPIO[0] = tdc_clocks[0]; //GPIO_00, pin 2
//assign GPIO[2] = tdc_clocks[4]; //GPIO_01, pin 4
//assign GPIO[2] = digmod_out; 	  //GPIO_03, pin 6
//assign GPIO[3] = mod_d;			  //GPIO_05, pin 8

assign rst = KEY[0];
assign pll_rst = KEY[1];
assign LED[0] = |{tdc_out_0, tdc_out_1, tdc_out_2, tdc_out_3};
assign LED[1] = tdc_dval;

always @ (posedge pll_clk[0] or negedge rst)
	begin
		if(!rst)
			begin
				clk_div <= 0;
				clk_10k <= 0;
				clk_10k_d <= 0;
			end
		else
			begin
				if(clk_div == 9999) 
					begin																													
						clk_div = 0;
						clk_10k <= ~clk_10k;
					end
				else clk_div <= clk_div + 1;
				
				clk_10k_d <= {clk_10k_d[9:0], clk_10k};
			end
	end

signal_pll pll_sg (.areset(~pll_rst), .inclk0(CLOCK_50), .c0(dm_clk), .c1(mod));

clock_block cb_inst (CLOCK_50, rst, KEY[1], pll_clk, inv_clk);
					
dm_min dm_inst (pll_clk[0], rst, clk_10k, digmod_out, mod_d);
						
tdc tdc_inst_0 (tdc_clocks, rst, SIGNAL, mod_d, tdc_out_0, tdc_dval[0]);
tdc tdc_inst_1 (tdc_clocks, rst, SIGNAL, mod_d, tdc_out_1, tdc_dval[1]);
tdc tdc_inst_2 (tdc_clocks, rst, SIGNAL, mod_d, tdc_out_2, tdc_dval[2]);
tdc tdc_inst_3 (tdc_clocks, rst, SIGNAL, mod_d, tdc_out_3, tdc_dval[3]);

endmodule
